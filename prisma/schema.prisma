// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Unity {
  id      String    @id @default(uuid())
  name    String    @unique
  product Product[]

  @@map("unity")
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]

  @@map("category")
}

model Product {
  id         String     @id @default(uuid())
  name       String     @unique
  price      Float
  unity      Unity      @relation(fields: [unityId], references: [id])
  unityId    String     @map("unity_id")
  categories Category[]
  saleItem   SaleItem[]

  @@map("product")
}

model Address {
  id         String  @id @default(uuid())
  street     String
  number     String
  complement String?
  zipCode    String
  district   String
  state      String
  country    String
  seller     Seller? @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId   String? @unique
  client     Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId   String? @unique

  @@map("address")
}

model Seller {
  id      String   @id @default(uuid())
  name    String   @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String   @unique
  address Address?
  sale    Sale[]

  @@map("seller")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  enabled  Boolean
  seller   Seller?

  @@map("user")
}

model Client {
  id      String   @id @default(uuid())
  name    String   @unique
  cpf     String   @unique
  sale    Sale[]
  address Address?

  @@map("client")
}

model Sale {
  id         String     @id @default(uuid())
  date       DateTime   @default(now())
  toDelivery Boolean
  delivered  Boolean
  client     Client     @relation(fields: [clientId], references: [id], onDelete: Restrict)
  clientId   String
  seller     Seller     @relation(fields: [sellerId], references: [id], onDelete: Restrict)
  sellerId   String
  saleItem   SaleItem[]

  @@map("sale")
}

model SaleItem {
  id        String  @id @default(uuid())
  price     Decimal
  quantity  Decimal
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("sale_item")
}
